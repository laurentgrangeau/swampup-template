# coding: utf-8

from __future__ import absolute_import
from swagger_server.models.pet_category import PetCategory
from swagger_server.models.pet_tags import PetTags
from .base_model_ import Model
from datetime import date, datetime
from typing import List, Dict
from ..util import deserialize_model


class Body(Model):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, id: int=None, category: PetCategory=None, name: str=None, photo_urls: List[str]=None, tags: List[PetTags]=None, status: str=None):
        """
        Body - a model defined in Swagger

        :param id: The id of this Body.
        :type id: int
        :param category: The category of this Body.
        :type category: PetCategory
        :param name: The name of this Body.
        :type name: str
        :param photo_urls: The photo_urls of this Body.
        :type photo_urls: List[str]
        :param tags: The tags of this Body.
        :type tags: List[PetTags]
        :param status: The status of this Body.
        :type status: str
        """
        self.swagger_types = {
            'id': int,
            'category': PetCategory,
            'name': str,
            'photo_urls': List[str],
            'tags': List[PetTags],
            'status': str
        }

        self.attribute_map = {
            'id': 'id',
            'category': 'category',
            'name': 'name',
            'photo_urls': 'photoUrls',
            'tags': 'tags',
            'status': 'status'
        }

        self._id = id
        self._category = category
        self._name = name
        self._photo_urls = photo_urls
        self._tags = tags
        self._status = status

    @classmethod
    def from_dict(cls, dikt) -> 'Body':
        """
        Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The body of this Body.
        :rtype: Body
        """
        return deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """
        Gets the id of this Body.

        :return: The id of this Body.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """
        Sets the id of this Body.

        :param id: The id of this Body.
        :type id: int
        """

        self._id = id

    @property
    def category(self) -> PetCategory:
        """
        Gets the category of this Body.

        :return: The category of this Body.
        :rtype: PetCategory
        """
        return self._category

    @category.setter
    def category(self, category: PetCategory):
        """
        Sets the category of this Body.

        :param category: The category of this Body.
        :type category: PetCategory
        """

        self._category = category

    @property
    def name(self) -> str:
        """
        Gets the name of this Body.

        :return: The name of this Body.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """
        Sets the name of this Body.

        :param name: The name of this Body.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")

        self._name = name

    @property
    def photo_urls(self) -> List[str]:
        """
        Gets the photo_urls of this Body.

        :return: The photo_urls of this Body.
        :rtype: List[str]
        """
        return self._photo_urls

    @photo_urls.setter
    def photo_urls(self, photo_urls: List[str]):
        """
        Sets the photo_urls of this Body.

        :param photo_urls: The photo_urls of this Body.
        :type photo_urls: List[str]
        """
        if photo_urls is None:
            raise ValueError("Invalid value for `photo_urls`, must not be `None`")

        self._photo_urls = photo_urls

    @property
    def tags(self) -> List[PetTags]:
        """
        Gets the tags of this Body.

        :return: The tags of this Body.
        :rtype: List[PetTags]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[PetTags]):
        """
        Sets the tags of this Body.

        :param tags: The tags of this Body.
        :type tags: List[PetTags]
        """

        self._tags = tags

    @property
    def status(self) -> str:
        """
        Gets the status of this Body.
        pet status in the store

        :return: The status of this Body.
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status: str):
        """
        Sets the status of this Body.
        pet status in the store

        :param status: The status of this Body.
        :type status: str
        """
        allowed_values = ["available", "pending", "sold"]
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"
                .format(status, allowed_values)
            )

        self._status = status

